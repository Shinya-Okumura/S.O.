/* Parameter setting */
n := 50;
l := 4;
dX := 1;
dr := 1;
de := dX + dr;
dec_p := 0;
for k := 0 to dX + dr do
	dec_p := dec_p + (k+1)*(n^k)*((l-1)^(k+1));
end for;
p1:=467424413;
p2:=973190461;
p3:=1665292879;
p := NextPrime(l-1+l*dec_p);

/* Polynomial setting */
Fp := GF(p);
Z := IntegerRing();
Rp<t> := PolynomialRing(Fp);
quo_Rp<s> := quo<Rp | t^n - 1>;
P<x,y> := PolynomialRing(quo_Rp, 2);
Pz<u> := PolynomialRing(Z);
Pl<v> := PolynomialRing(IntegerRing(l));
R2 := (n*(dr+1)*(dr+2))/2;
MissFind :=0;
NotFind := 0;



/* Support setting */
Gamma_X := [[i, j] : i in [0..dX], j in [0..dX] | i + j le dX];
Gamma_r := [[i, j] : i in [0..dr], j in [0..dr] | i + j le dr];
Gamma_e := [[i, j] : i in [0..de], j in [0..de] | i + j le de];

/* Random Univariate Polynomial Generation */
Poly_gen1 := function(max_coef, deg,s)

	f := quo_Rp!0;
        for i := 0 to deg do
        	f := f + Random(0, max_coef)*s^i;
        end for;


        return f;

end function;

/* Key Generation */
Gio_Keygen := function(p, l, n, Gamma_X,x,y,s)

	ux := Poly_gen1(l-1, n-1,s);
        uy := Poly_gen1(l-1, n-1,s);

        X := P!0;
        for i := 1 to #Gamma_X do
                if Gamma_X[i] ne [0,0] then
        		X := X + Poly_gen1(p-1, n-1,s)*x^Gamma_X[i,1]*y^Gamma_X[i,2];
                end if;
        end for;

        X := X - Evaluate(X, [ux, uy]);

        return  [ux,uy],X;

end function;

/* Random multivariate Polynomial Generation */
Poly_gen2 := function(support, max_coef, n, x, y, s);

	F := P!0;
        for i := 1 to #support do
        	F := F + Poly_gen1(max_coef-1, n-1,s)*x^support[i,1]*y^support[i,2];
        end for;

	return F;

end function;

/* Encryption */
Gio_Enc := function(pub, plain, p, l, n, Gamma_r, Gamma_e, x, y, s)

        r := Poly_gen2(Gamma_r, p, n, x, y, s);
        e := Poly_gen2(Gamma_e, l, n, x, y, s);
	return plain + r*pub + P!l*e,e;

end function;

/* Decryption */
Gio_Dec := function(Cipher, sec)
	
	C_eval := Evaluate(Cipher, sec);
        return Pl!(Pz!C_eval);
        
end function;

/* IE-LWE Sample Generation */
IE_LWE_Samp_gen := function(p, l, n, Gamma_X, Gamma_r, Gamma_e,x,y,s)

	_, X := Gio_Keygen(p, l, n, Gamma_X,x,y,s);
        r := Poly_gen2(Gamma_r, p, n, x, y, s);
        e := Poly_gen2(Gamma_e, l, n, x, y, s);
	return [X, X*r + e],e;

end function;

// ---------------------------------------- //


/* Encryption / Decryption Check */
t0 := Realtime();
sk,pk:= Gio_Keygen(p, l, n, Gamma_X,x,y,s);
t_keygen := Realtime() - t0;
m := Poly_gen1(l-1, n-1,s); // Plaintext
C,e_old:= Gio_Enc(pk, m, p, l, n, Gamma_r, Gamma_e,x,y,s);
t_enc := Realtime() - t0;
m_cand := Gio_Dec(C, sk);
t_dec := Realtime() - t0;

t_keygen;
t_enc;
t_dec;

Coefficients(Pl!(Pz!m)) eq Coefficients(m_cand);
m_cand;

/* Random Y Generation */
Random_Y := function(p,n,Gamma_e);

	Y := P!0;
	for i := 1 to #Gamma_e do
		if Gamma_e[i] ne [0,0] then
			Y := Y + Poly_gen1(p-1, n-1,s)*x^Gamma_e[i,1]*y^Gamma_e[i,2];

		end if;

	end for;

	r := Random(p-1);
	Y := Y + r;

	return Y;

end function;


/* Attack*/
t1 := Realtime();
for i := 1 to 1000 do 

Y := Random_Y(p,n,Gamma_e);
sk,X := Gio_Keygen(p, l, n, Gamma_X,x,y,s);



Coef_X := Coefficients(X);
Coef_Y := Coefficients(Y); 

Coef_X_1 := [Z!Evaluate(Rp!coef, Fp!1) : coef in Coef_X];
Coef_Y_1 := [Z!Evaluate(Rp!coef, Fp!1) : coef in Coef_Y]; 

a_10 := Coef_X_1[1];
a_01 := Coef_X_1[2];
a_00 := Coef_X_1[3];
/* Find Closest Vectors */
B := Matrix(Z, 3, 6, [a_10,a_01,a_00,0,0,0,0,a_10,0,a_01,a_00,0,0,0,a_10,0,a_01,a_00]);

pI := ScalarMatrix(6,p);

B := VerticalJoin(B,pI);
w := Vector(Coef_Y_1);


L := Lattice(B);
D,d := ClosestVectors(L,w);

W := Matrix(RationalField(),1,6,[w[1],w[2],w[3],w[4],w[5],w[6]]);



e_expect := Matrix(Z,1,6,[EuclideanNorm(Z!(W[1,1])-(D[1,1])),EuclideanNorm(Z!(W[1,2])-(D[1,2])),EuclideanNorm(Z!(W[1,3])-(D[1,3])),
EuclideanNorm(Z!(W[1,4])-(D[1,4])),EuclideanNorm(Z!(W[1,5])-(D[1,5])),EuclideanNorm(Z!(W[1,6])-(D[1,6]))]);e_expect;

/* Distinguish e_expect */

count :=1;
for j := 1 to 6 do 

	if EuclideanNorm(e_expect[1,j]) gt n*(l-1) then
		
		NotFind := NotFind + 1;
		break;
	end if;
	if count eq 6 then
		if EuclideanNorm(e_expect[1,j]) le n*(l-1) then
			MissFind := MissFind + 1;
			e_expect;
		end if;
	end if;

	count := count + 1;
end for;


end for;

AttackTime := Realtime()-t1;AttackTime;
MissFind;
NotFind;




